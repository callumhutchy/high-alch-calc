{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","profitable","App","WaitForData","className","id","type","onClick","SortByMaxProfit","SortByProfit","generateTableHead","table","data","row","createTHead","insertRow","key","th","document","createElement","readableName","text","createTextNode","appendChild","generateTable","element","cell","insertCell","obj","src","SortProfit","CompareProfit","CompareMaxProfit","compare","getElementById","innerHTML","sort","querySelector","Object","keys","GetItems","natureRunePrice","a","fetch","response","json","processedData","hasOwnProperty","highalch","tradeable","push","GetPrices","p","find","price","i","ProcessPricesAndItems","console","log","undefined","index","length","ip","o","prof","icon","Image","item","name","profit","buy_limit","max_profit","initial_capital","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,gICMvCC,G,YAAa,IAyBFC,MAvBf,WAEE,O,mCADAC,GAEE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uDAGA,yBAAKC,GAAG,eACR,4BAAQA,GAAG,OAAOC,KAAK,SAASC,QAASC,GAAzC,sBACA,4BAAQH,GAAG,OAAOC,KAAK,SAASC,QAASE,GAAzC,8BAGA,yBAAKJ,GAAG,aACN,2BAAOA,GAAG,mBAWpB,SAASK,EAAkBC,EAAOC,GAChC,IADsC,EAElCC,EADQF,EAAMG,cACFC,YAFsB,cAGtBH,GAHsB,IAGtC,2BAAsB,CAAC,IAAdI,EAAa,QAChBC,EAAKC,SAASC,cAAc,MAC5BC,EAAe,GACnB,OAAQJ,GACN,IAAK,OACHI,EAAe,GACf,MACF,IAAK,OACHA,EAAe,OACf,MACF,IAAK,WACHA,EAAe,kBACf,MACF,IAAK,QACHA,EAAe,WACf,MACF,IAAK,SACHA,EAAe,oBACf,MACF,IAAK,YACHA,EAAe,YACf,MACF,IAAK,aACHA,EAAe,aACf,MACF,IAAK,kBACHA,EAAe,eAGnB,IAAIC,EAAOH,SAASI,eAAeF,GACnCH,EAAGM,YAAYF,GACfR,EAAIU,YAAYN,IAlCoB,+BAsCxC,SAASO,EAAcb,EAAOC,GAAO,IAAD,gBACdA,GADc,IAClC,2BAA0B,CAAC,IAAlBa,EAAiB,QACpBZ,EAAMF,EAAMI,YAChB,IAAK,IAAIC,KAAOS,EAAS,CACvB,IAAIC,EAAOb,EAAIc,aACf,cAAeF,EAAQT,IACrB,IAAK,SACL,IAAK,SACH,IAAIK,EAAOH,SAASI,eAAeG,EAAQT,IAC3CU,EAAKH,YAAYF,GACjB,MACF,IAAK,SACH,IAAIO,EAAMV,SAASC,cAAc,OACjCS,EAAIC,IAAMJ,EAAQT,GAAKa,IACvBH,EAAKH,YAAYK,MAdS,+BAoBpC,SAASnB,IACPqB,EAAWC,GAGb,SAASvB,IACPsB,EAAWE,GAGb,SAASF,EAAWG,GAClBf,SAASgB,eAAe,aAAaC,UAAY,GACjDjB,SAASgB,eAAe,aAAaC,UAAY,kCACjDlC,EAAWmC,KAAKH,GAChB,IAAItB,EAAQO,SAASmB,cAAc,SAC/BzB,EAAO0B,OAAOC,KAAKtC,EAAW,IAClCuB,EAAcb,EAAOV,GACrBS,EAAkBC,EAAOC,G,SAKZ4B,E,8EAAf,WAAwBC,GAAxB,2BAAAC,EAAA,sEACuBC,MAAM,wFAD7B,cACMC,EADN,gBAEmBA,EAASC,OAF5B,OAEMjC,EAFN,OAGMkC,EAAgB,GAHtB,OAAAJ,EAAA,KAKkB9B,GALlB,iDAKWI,EALX,WAMSJ,EAAKmC,eAAe/B,GAN7B,uDAQQY,EAAMhB,EAAKI,GACXgC,EAAWpB,EAAG,SACdqB,EAAYrB,EAAG,gBACH,MAAZoB,GAAoBA,EAAWP,GAAgC,MAAbQ,GAAkC,GAAbA,GACzEH,EAAcI,KAAKtB,GAZzB,gDAgBSkB,GAhBT,6C,kEAoBA,gCAAAJ,EAAA,sEACgBS,IADhB,cACMC,EADN,OAEMX,EAAkBW,EAAEC,MAAK,SAAAzB,GAC3B,OAAkB,MAAXA,EAAIvB,MACViD,MAJL,SAKgBd,EAASC,GALzB,OAKMc,EALN,OAMEC,EAAsBJ,EAAGG,EAAGd,GAN9B,4C,+BAUeU,I,2EAAf,8BAAAT,EAAA,sEACuBC,MAAM,wDAD7B,cACMC,EADN,gBAEmBA,EAASC,OAF5B,cAEMjC,EAFN,yBAGSA,GAHT,4C,sBAMA,SAAS4C,EAAsBJ,EAAGG,EAAGd,GAGnC,GAFAgB,QAAQC,IAAIN,GACZK,QAAQC,IAAIH,GACH,MAALA,GAAkB,MAALH,QAAkBO,GAALJ,QAAuBI,GAALP,EAC9C,IAAK,IAAIQ,EAAQ,EAAGA,EAAQL,EAAEM,OAAQD,IAAS,CAC7C,IAAIvD,EAAKkD,EAAEK,GAAF,GACLZ,EAAWO,EAAEK,GAAF,SACXE,EAAKV,EAAEC,MAAK,SAAAU,GACd,OAAOA,EAAC,KAAW1D,KAClBiD,MACCU,EAAOhB,GAAYc,EAAKrB,GAC5B,GAAKO,EAAWc,EAAKrB,GAAoBuB,EAAO,IAAK,CACnD,IAAIC,EAAO,IAAIC,MACfD,EAAKpC,IAAM,yBAA2B0B,EAAEK,GAAF,KACtC,IAAIO,EAAO,CACTF,KAAMA,EACNG,KAAMb,EAAEK,GAAF,KACNZ,SAAUA,EACVM,MAAOQ,EACPO,OAAQL,EACRM,UAAWf,EAAEK,GAAF,UACXW,WAAYhB,EAAEK,GAAF,WAAyBZ,GAAYc,EAAKrB,IACtD+B,gBAAiBV,EAAKP,EAAEK,GAAF,WAExB3D,EAAWiD,KAAKiB,IAItBlE,EAAWmC,KAAKJ,GAChByB,QAAQC,IAAIzD,GAEZ,IAAIU,EAAQO,SAASmB,cAAc,SAC/BzB,EAAO0B,OAAOC,KAAKtC,EAAW,IAElCuB,EAAcb,EAAOV,GACrBS,EAAkBC,EAAOC,GAM3B,SAASoB,EAAiBU,EAAG+B,GAU3B,OATgB/B,EAAE6B,WACFE,EAAEF,YAIF,EAED,EAKjB,SAASxC,EAAcW,EAAG+B,GAUxB,OATgB/B,EAAE2B,OACFI,EAAEJ,QAIF,EAED,ECrMGK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/D,SAASgB,eAAe,SDyHpB,kBAAmBgD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.53eba48f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar itemsToCheck = null;\nvar prices = [];\nvar profitable = [];\n\nfunction App() {\n  WaitForData();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>\n        Hutchy's High Alch list\n        </h3>\n        <div id=\"sortbuttons\">\n        <button id=\"sort\" type=\"button\" onClick={SortByMaxProfit}>Sort by Max Profit</button>     \n        <button id=\"sort\" type=\"button\" onClick={SortByProfit}>Sort by Individual Profit</button>\n        </div>\n        \n        <div id=\"table-div\">\n          <table id=\"item_table\">\n\n          </table>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction generateTableHead(table, data) {\n  let thead = table.createTHead();\n  let row = thead.insertRow();\n  for (let key of data) {\n    let th = document.createElement(\"th\");\n    let readableName = \"\";\n    switch (key) {\n      case \"icon\":\n        readableName = \"\";\n        break;\n      case \"name\":\n        readableName = \"Name\";\n        break;\n      case \"highalch\":\n        readableName = \"High Alch Value\";\n        break;\n      case \"price\":\n        readableName = \"GE Price\";\n        break;\n      case \"profit\":\n        readableName = \"Individual Profit\";\n        break;\n      case \"buy_limit\":\n        readableName = \"Buy Limit\";\n        break;\n      case \"max_profit\":\n        readableName = \"Max Profit\";\n        break;\n      case \"initial_capital\":\n        readableName = \"Initial Cash\";\n        break;\n    }\n    let text = document.createTextNode(readableName);\n    th.appendChild(text);\n    row.appendChild(th);\n  }\n}\n\nfunction generateTable(table, data) {\n  for (let element of data) {\n    let row = table.insertRow();\n    for (var key in element) {\n      let cell = row.insertCell();\n      switch (typeof element[key]) {\n        case 'number':\n        case 'string':\n          let text = document.createTextNode(element[key]);\n          cell.appendChild(text);\n          break;\n        case 'object':\n          let obj = document.createElement(\"IMG\");\n          obj.src = element[key].src;\n          cell.appendChild(obj);\n      }\n    }\n  }\n}\n\nfunction SortByProfit() {\n  SortProfit(CompareProfit);\n}\n\nfunction SortByMaxProfit() {\n  SortProfit(CompareMaxProfit);\n}\n\nfunction SortProfit(compare) {\n  document.getElementById(\"table-div\").innerHTML = \"\";\n  document.getElementById(\"table-div\").innerHTML = '<table id=\"item_table\"></table>';\n  profitable.sort(compare);\n  let table = document.querySelector(\"table\");\n  let data = Object.keys(profitable[0]);\n  generateTable(table, profitable);\n  generateTableHead(table, data);\n}\n\n//Retrieve all items from a complete list of OSRS items, and then filtering by items that have High alch values and we can buy on the GE.\n//TODO: Might be worth looking into creating our own version with the information already stripped out. We would need to update that ourself though.\nasync function GetItems(natureRunePrice) {\n  let response = await fetch('https://raw.githubusercontent.com/osrsbox/osrsbox-db/master/docs/items-complete.json');\n  let data = await response.json();\n  var processedData = [];\n\n  for (var key in data) {\n    if (!data.hasOwnProperty(key)) continue;\n\n    var obj = data[key];\n    var highalch = obj[\"highalch\"];\n    var tradeable = obj[\"tradeable_on_ge\"];\n    if (highalch != null && highalch > natureRunePrice && tradeable != null && tradeable == true) {\n      processedData.push(obj);\n    }\n  }\n\n  return processedData;\n}\n\n//Wait for our API calls to finish and get the current price for nature runes for later\nasync function WaitForData() {\n  let p = await GetPrices();\n  var natureRunePrice = p.find(obj => {\n    return obj.id === 561;\n  }).price;\n  let i = await GetItems(natureRunePrice);\n  ProcessPricesAndItems(p, i, natureRunePrice);\n}\n\n//Get current GE prices from Runelite API, Runelite API is more reliable than other APIs i've tried\nasync function GetPrices() {\n  let response = await fetch('HTTPS://api.runelite.net/runelite-1.6.20/item/prices');\n  let data = await response.json();\n  return data;\n}\n\nfunction ProcessPricesAndItems(p, i, natureRunePrice) {\n  console.log(p);\n  console.log(i);\n  if (i != null && p != null && i != undefined && p != undefined) {\n    for (var index = 0; index < i.length; index++) {\n      var id = i[index][\"id\"];\n      var highalch = i[index][\"highalch\"];\n      var ip = p.find(o => {\n        return o[\"id\"] === id;\n      }).price;\n      var prof = highalch - (ip + natureRunePrice);\n      if ((highalch > ip + natureRunePrice) && prof > 100) {\n        var icon = new Image();\n        icon.src = 'data:image/png;base64,' + i[index][\"icon\"];\n        var item = {\n          icon: icon,\n          name: i[index][\"name\"],\n          highalch: highalch,\n          price: ip,\n          profit: prof,\n          buy_limit: i[index][\"buy_limit\"],\n          max_profit: i[index][\"buy_limit\"] * (highalch - (ip + natureRunePrice)),\n          initial_capital: ip * i[index][\"buy_limit\"]\n        };\n        profitable.push(item);\n      }\n    }\n  }\n  profitable.sort(CompareMaxProfit);\n  console.log(profitable);\n\n  let table = document.querySelector(\"table\");\n  let data = Object.keys(profitable[0]);\n\n  generateTable(table, profitable);\n  generateTableHead(table, data);\n\n}\n\n\n//Sorting functions\nfunction CompareMaxProfit(a, b) {\n  const profitA = a.max_profit;\n  const profitB = b.max_profit;\n\n  let comparison = 0;\n  if (profitA > profitB) {\n    comparison = -1;\n  } else {\n    comparison = 1;\n  }\n  return comparison;\n}\n\nfunction CompareProfit(a, b) {\n  const profitA = a.profit;\n  const profitB = b.profit;\n\n  let comparison = 0;\n  if (profitA > profitB) {\n    comparison = -1;\n  } else {\n    comparison = 1;\n  }\n  return comparison;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}